import os,sys
import numpy as np
import keras
import pylab
import pandas as pd
from keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Dropout, Activation,InputLayer
from keras.layers import Embedding ,Reshape, Input, Lambda, Layer
from keras.layers import Conv1D, GlobalMaxPooling1D
from keras.utils import np_utils
from keras import optimizers,preprocessing
import tensorflow as tf
import tensorflow.keras.applications
from keras_self_attention import SeqSelfAttention ,SeqWeightedAttention
from keras.layers import LSTM, Bidirectional,GRU,BatchNormalization
from keras.layers import Conv1D, MaxPooling1D,Conv2D ,Permute,MaxPooling2D,Flatten
from sklearn.model_selection import KFold, StratifiedKFold, train_test_split,StratifiedShuffleSplit
from sklearn.metrics import accuracy_score, recall_score, confusion_matrix,precision_score, f1_score, roc_auc_score,r2_score,matthews_corrcoef
import keras.backend as K
from keras.callbacks import LearningRateScheduler, ModelCheckpoint,ReduceLROnPlateau
from keras.initializers import Constant
from tensorflow.keras.models import load_model
import copy

config=tf.compat.v1.ConfigProto()
config.gpu_options.allow_growth = True
sess=tf.compat.v1.Session(config=config)

X_train = np.load("Xtrain.npy",allow_pickle=True)
X_test = np.load("Xtest.npy",allow_pickle=True)
Y_train = np.load("Ytrain.npy",allow_pickle=True)
Y_test = np.load("Ytest.npy",allow_pickle=True)

y_test = []
for i in range(2131):
    x = np.argmax(Y_test[i])
    y_test.append(x)
y_train = []
for i in range(8523):
    x = np.argmax(Y_train[i])
    y_train.append(x)

tmpList0 = copy.copy(y_train)
tmpList1 = copy.copy(tmpList0)
tmpList2 = copy.copy(tmpList1)
tmpList3 = copy.copy(tmpList2)
tmpList4 = copy.copy(tmpList3)
tmpList5 = copy.copy(tmpList4)
tmpList6 = copy.copy(tmpList5)
tmpList7 = copy.copy(tmpList6)

tmptestList0 = copy.copy(y_test)
tmptestList1 = copy.copy(tmptestList0)
tmptestList2 = copy.copy(tmptestList1)
tmptestList3 = copy.copy(tmptestList2)
tmptestList4 = copy.copy(tmptestList3)
tmptestList5 = copy.copy(tmptestList4)
tmptestList6 = copy.copy(tmptestList5)
tmptestList7 = copy.copy(tmptestList6)
# 标签转换，将0-7 对应标签分别置为0 其余标签置为1(是谁谁变0，其余变1)
yList0 = []
for i in range(0, len(tmpList0)):
    if tmpList0[i] != 0:
        tmpList0[i] = 1
    yList0.append(tmpList0[i])
    i = i + 1

yList1 = []
for i in range(0, len(tmpList1)):
    if tmpList1[i] != 1:
        tmpList1[i] = 1
    elif tmpList1[i] == 1:
        tmpList1[i] = 0
    yList1.append(tmpList1[i])
    i = i + 1

yList2 = []
for i in range(0, len(tmpList2)):
    if tmpList2[i] != 2:
        tmpList2[i] = 1
    elif tmpList2[i] == 2:
        tmpList2[i] = 0
    yList2.append(tmpList2[i])
    i = i + 1

yList3 = []
for i in range(0, len(tmpList3)):
    if tmpList3[i] != 3:
        tmpList3[i] = 1
    elif tmpList3[i] == 3:
        tmpList3[i] = 0
    yList3.append(tmpList3[i])
    i = i + 1

yList4 = []
for i in range(0, len(tmpList4)):
    if tmpList4[i] != 4:
        tmpList4[i] = 1
    elif tmpList4[i] == 4:
        tmpList4[i] = 0
    yList4.append(tmpList4[i])
    i = i + 1

yList5 = []
for i in range(0, len(tmpList5)):
    if tmpList5[i] != 5:
        tmpList5[i] = 1
    elif tmpList5[i] == 5:
        tmpList5[i] = 0
    yList5.append(tmpList5[i])
    i = i + 1

yList6 = []
for i in range(0, len(tmpList6)):
    if tmpList6[i] != 6:
        tmpList6[i] = 1
    elif tmpList6[i] == 6:
        tmpList6[i] = 0
    yList6.append(tmpList6[i])
    i = i + 1

yList7 = []
for i in range(0, len(tmpList7)):
    if tmpList7[i] != 7:
        tmpList7[i] = 1
    elif tmpList7[i] == 7:
        tmpList7[i] = 0
    yList7.append(tmpList7[i])
    i = i + 1

ytestList0 = []
for i in range(0, len(tmptestList0)):
    if tmptestList0[i] != 0:
        tmptestList0[i] = 1
    ytestList0.append(tmptestList0[i])
    i = i + 1

ytestList1 = []
for i in range(0, len(tmptestList1)):
    if tmptestList1[i] != 1:
        tmptestList1[i] = 1
    elif tmptestList1[i] == 1:
        tmptestList1[i] = 0
    ytestList1.append(tmptestList1[i])
    i = i + 1

ytestList2 = []
for i in range(0, len(tmptestList2)):
    if tmptestList2[i] != 2:
        tmptestList2[i] = 1
    elif tmptestList2[i] == 2:
        tmptestList2[i] = 0
    ytestList2.append(tmptestList2[i])
    i = i + 1

ytestList3 = []
for i in range(0, len(tmptestList3)):
    if tmptestList3[i] != 3:
        tmptestList3[i] = 1
    elif tmptestList3[i] == 3:
        tmptestList3[i] = 0
    ytestList3.append(tmptestList3[i])
    i = i + 1

ytestList4 = []
for i in range(0, len(tmptestList4)):
    if tmptestList4[i] != 4:
        tmptestList4[i] = 1
    elif tmptestList4[i] == 4:
        tmptestList4[i] = 0
    ytestList4.append(tmptestList4[i])
    i = i + 1

ytestList5 = []
for i in range(0, len(tmptestList5)):
    if tmptestList5[i] != 5:
        tmptestList5[i] = 1
    elif tmptestList5[i] == 5:
        tmptestList5[i] = 0
    ytestList5.append(tmptestList5[i])
    i = i + 1

ytestList6 = []
for i in range(0, len(tmptestList6)):
    if tmptestList6[i] != 6:
        tmptestList6[i] = 1
    elif tmptestList6[i] == 6:
        tmptestList6[i] = 0
    ytestList6.append(tmptestList6[i])
    i = i + 1

ytestList7 = []
for i in range(0, len(tmptestList7)):
    if tmptestList7[i] != 7:
        tmptestList7[i] = 1
    elif tmptestList7[i] == 7:
        tmptestList7[i] = 0
    ytestList7.append(tmptestList7[i])
    i = i + 1

X = X_train
Y_train_float = tf.cast(Y_train,dtype=tf.float32)
Y_test_float = tf.cast(Y_test,dtype=tf.float32)
yList0tf = tf.cast(np.array(yList0),dtype=tf.float32)
yList1tf = tf.cast(np.array(yList1),dtype=tf.float32)
yList2tf = tf.cast(np.array(yList2),dtype=tf.float32)
yList3tf = tf.cast(np.array(yList3),dtype=tf.float32)
yList4tf = tf.cast(np.array(yList4),dtype=tf.float32)
yList5tf = tf.cast(np.array(yList5),dtype=tf.float32)
yList6tf = tf.cast(np.array(yList6),dtype=tf.float32)
yList7tf = tf.cast(np.array(yList7),dtype=tf.float32)
ytestList0tf = tf.cast(np.array(ytestList0),dtype=tf.float32)
ytestList1tf = tf.cast(np.array(ytestList1),dtype=tf.float32)
ytestList2tf = tf.cast(np.array(ytestList2),dtype=tf.float32)
ytestList3tf = tf.cast(np.array(ytestList3),dtype=tf.float32)
ytestList4tf = tf.cast(np.array(ytestList4),dtype=tf.float32)
ytestList5tf = tf.cast(np.array(ytestList5),dtype=tf.float32)
ytestList6tf = tf.cast(np.array(ytestList6),dtype=tf.float32)
ytestList7tf = tf.cast(np.array(ytestList7),dtype=tf.float32)

api_number = 295
seq_length = 200

inp = Input(shape=(295,200), name='inp')
tmp = Reshape([295,200,1])(inp)
tmp=Conv2D(1,(1,1),padding = 'valid',activation = 'relu',strides = 1)(tmp)
tmp=Reshape([295,200])(tmp)
tmp=Permute([2,1])(tmp)
tmp=tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(units=64,activation = 'tanh',return_sequences=True))(tmp)
tmp=SeqSelfAttention(attention_activation='softmax')(tmp)
tmp=tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(units=32,activation = 'tanh',return_sequences=True))(tmp)
tmp=SeqSelfAttention(attention_activation='softmax')(tmp)
tmp=tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(units=16,activation = 'tanh',return_sequences=True))(tmp)
tmp=SeqSelfAttention(attention_activation='softmax')(tmp)
tmp.set_shape([None,200,32])
tmp=Flatten()(tmp)
tmp = Dense(400)(tmp)
tmp = Dense(200)(tmp)
tmp = Dense(64)(tmp)
tmp = Dense(32)(tmp)
tmp = Dense(16)(tmp)
tmp = Dense(8)(tmp)
y_pred=Activation('softmax',name='y_pred')(tmp)
tmp1 = Dense(1)(tmp)
y0_pred=Activation('sigmoid',name='y0_pred')(tmp1)
y1_pred=Activation('sigmoid',name='y1_pred')(tmp1)
y2_pred=Activation('sigmoid',name='y2_pred')(tmp1)
y3_pred=Activation('sigmoid',name='y3_pred')(tmp1)
y4_pred=Activation('sigmoid',name='y4_pred')(tmp1)
y5_pred=Activation('sigmoid',name='y5_pred')(tmp1)
y6_pred=Activation('sigmoid',name='y6_pred')(tmp1)
y7_pred=Activation('sigmoid',name='y7_pred')(tmp1)
model = Model(inputs=[inp],outputs=[y_pred,y0_pred,y1_pred,y2_pred,y3_pred,y4_pred,y5_pred,y6_pred,y7_pred])
# model.summary()

model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.001),
          loss={'y_pred': 'categorical_crossentropy',
                'y0_pred': 'binary_crossentropy',
                'y1_pred': 'binary_crossentropy',
                'y2_pred': 'binary_crossentropy',
                'y3_pred': 'binary_crossentropy',
                'y4_pred': 'binary_crossentropy',
                'y5_pred': 'binary_crossentropy',
                'y6_pred': 'binary_crossentropy',
                'y7_pred': 'binary_crossentropy'},
         metrics = {
             'y_pred':['categorical_accuracy'],
             'y0_pred':['binary_accuracy'],
             'y1_pred':['binary_accuracy'],
             'y2_pred':['binary_accuracy'],
             'y3_pred':['binary_accuracy'],
             'y4_pred':['binary_accuracy'],
             'y5_pred':['binary_accuracy'],
             'y6_pred':['binary_accuracy'],
             'y7_pred':['binary_accuracy']
         })
hist = model.fit({'inp': X_train},
          {'y_pred': Y_train_float,'y0_pred': yList0tf,'y1_pred': yList1tf,'y2_pred': yList2tf,'y3_pred': yList3tf,'y4_pred': yList4tf,'y5_pred': yList5tf,'y6_pred':yList6tf,'y7_pred':yList7tf}
                 ,epochs=60, batch_size=256,validation_data=([X_test], [Y_test_float,ytestList0tf, ytestList1tf, ytestList2tf, ytestList3tf, ytestList4tf, ytestList5tf, ytestList6tf, ytestList7tf]))

yOut = model.predict(X_test)
pre = precision_score(np.argmax(Y_test,axis=1),np.argmax(yOut[0],axis=1), average='weighted')
acc = accuracy_score(np.argmax(Y_test,axis=1),np.argmax(yOut[0],axis=1))
recall = recall_score(np.argmax(Y_test,axis=1),np.argmax(yOut[0],axis=1), average='weighted')
F1 = f1_score(np.argmax(Y_test,axis=1),np.argmax(yOut[0],axis=1), average='weighted')
print('acc:',acc)
print("pre:",pre)
print('recall:',recall)
print('F1:',F1)